<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.2.2" created="2015-07-11 02:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Raz Shahriar</title>
	<link>http://ce5.ed6.myftpupload.com</link>
	<description>Imagination is more important than Knowledge</description>
	<pubDate>Sat, 11 Jul 2015 02:01:55 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://ce5.ed6.myftpupload.com</wp:base_site_url>
	<wp:base_blog_url>http://ce5.ed6.myftpupload.com</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>raz</wp:author_login><wp:author_email>razibh@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Raz Shahriar]]></wp:author_display_name><wp:author_first_name><![CDATA[Raz]]></wp:author_first_name><wp:author_last_name><![CDATA[Shahriar]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename>agile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Agile]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>31</wp:term_id><wp:category_nicename>design</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Design]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>fun-stuff</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Fun Stuff]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>functional-programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Functional Programming]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>general</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>java</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[java]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>science</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Science]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>space</wp:category_nicename><wp:category_parent>science</wp:category_parent><wp:cat_name><![CDATA[Space]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>spring</wp:category_nicename><wp:category_parent>java</wp:category_parent><wp:cat_name><![CDATA[Spring]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>springmvc</wp:category_nicename><wp:category_parent>spring</wp:category_parent><wp:cat_name><![CDATA[Spring MVC]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>technology</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Technology]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>webdesign</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web Design]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>wordpress</wp:category_nicename><wp:category_parent>webdesign</wp:category_parent><wp:cat_name><![CDATA[Wordpress]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>css</wp:category_nicename><wp:category_parent>webdesign</wp:category_parent><wp:cat_name><![CDATA[CSS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>hibernate</wp:category_nicename><wp:category_parent>java</wp:category_parent><wp:cat_name><![CDATA[Hibernate]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>html</wp:category_nicename><wp:category_parent>webdesign</wp:category_parent><wp:cat_name><![CDATA[Html]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>html5</wp:category_nicename><wp:category_parent>webdesign</wp:category_parent><wp:cat_name><![CDATA[Html5]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent>webdesign</wp:category_parent><wp:cat_name><![CDATA[JavaScript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>stereo-3d</wp:category_nicename><wp:category_parent>technology</wp:category_parent><wp:cat_name><![CDATA[Stereo 3D]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[android]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>best-practice</wp:tag_slug><wp:tag_name><![CDATA[best practice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>concurrency</wp:tag_slug><wp:tag_name><![CDATA[concurrency]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>design-2</wp:tag_slug><wp:tag_name><![CDATA[design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>fermi</wp:tag_slug><wp:tag_name><![CDATA[fermi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>functional-programming-2</wp:tag_slug><wp:tag_name><![CDATA[functional programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[google]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>hacks</wp:tag_slug><wp:tag_name><![CDATA[hacks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>hibernate</wp:tag_slug><wp:tag_name><![CDATA[Hibernate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>nasa</wp:tag_slug><wp:tag_name><![CDATA[nasa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>news</wp:tag_slug><wp:tag_name><![CDATA[news]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>s3d</wp:tag_slug><wp:tag_name><![CDATA[s3d]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>time</wp:tag_slug><wp:tag_name><![CDATA[time]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>tips</wp:tag_slug><wp:tag_name><![CDATA[tips]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>wordpress-2</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>youtube</wp:tag_slug><wp:tag_name><![CDATA[youtube]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>6</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>java</wp:term_slug><wp:term_name><![CDATA[java]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=4.2.2</generator>

	<item>
		<title>Hibernate Derived Properties</title>
		<link>http://ce5.ed6.myftpupload.com/2008/12/hibernate-derived-properties/</link>
		<pubDate>Wed, 10 Dec 2008 23:28:15 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razibh.wordpress.com/2010/12/10/hibernate-derived-properties/</guid>
		<description></description>
		<content:encoded><![CDATA[Couple of days back I had an interesting design discussion with some fellow mates about how to handle a bean property that is derived from other properties of the bean and is also persisted using hibernate. The issue might seem a bit trivial/counter-intuitive at first as a derived property doesn't need to be persisted - as it can always be generated from the other properties.

However, this situation may occur in some legacy systems - and we might face a design issue in writing a good way of handling the property. I will be discussing a few of the ways it can be dealt with - looking at the strength and weaknesses of each approach.

It is common for legacy databases to have a first name, last name and full name columns in the table that represents customers or persons.

For the purposes of this discussion, we would also assume that there are different legacy systems that feed person data in to this database, some may export both first/last and full name, while some may export either first/last names or full name.

Our job is to design a java web application that allows CRUD operations on the person database.

Let’s say for the front end, we only let the user modify the first and last names and their name is generated from the first and last names - which gets displayed in other pages. The user can never enter their full name using the java front end.

Thus when designing a java CRUD web application for this table we can start off with a bean like below. Let us also assume that we have setup hibernate to construct person beans from the database rows - and in our configuration we have asked hibernate to use property access, ie via getters/setters of the bean instead of directly accessing fields using reflection.

[java]
class Person {
private String firstName;
private String lastName;
private String fullName;
public String getFirstName() {
return firstName;
}
public void setFirstName(String firstName) {
this.firstName = firstName;
updateName();
}
public String getLastName() {
return lastName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
updateName();
}
public String getFullName() {
return this.fullName;
}
public void setFullName(String fullName) {
this.fullName = fullName;
}
private void updateName() {
setFullName( this.firstName + " " + this.lastName );
}
}
[/java]

As you can see this leads to a leaky implementation, the client of the bean can easily call setFullName(...) and the integrity of the object might get broken.

So a better approach is to make setFullName(...) private so that other developers don't get confused nor can they accidently execute it. Some comments on top of setFullName(...) will be handy too.

[java]
class Person {
/** Never call this - only used internally */
private void setFullName(String fullName) {
this.fullName = fullName;
}
}
[/java]

Note that this works because hibernate can access private getters / setters using reflection.

But now we realize we have another problem - depending on the exact sequence hibernate calls these getters / setters we may end up in an invalid state.

For instance, consider this sequence when hibernate loads an object:

1. hibernate : <span class="lang:default decode:true  crayon-inline ">person.setName("Raz Shahriar")</span>
2. hibernate : <span class="lang:default decode:true  crayon-inline ">person.setFirstName("");</span>
3. hibernate : <span class="lang:default decode:true  crayon-inline ">person.setLastName("");</span>

So we don't want to get into inconsistent states neither from the hibernate end nor from the frontend/controller end.

Another attempt might be to modify the getter of the full name in this way:

[java]
@SuppressWarnings("unused")
Class Person {
// simple first and last name setters
public void setFirstName(String firstName) {
this.firstName = firstName;
}
public void setLastName(String lastName) {
this.lastName = lastName;
}
/** Never call this - only used internally */
private void setFullName(String fullName) {
// this is kept because hibernate might need its presence when loading getters/setters using reflection
}
// full name is derived and saved
public String getFullName() {
return this.firstName + this.lastName;
}
}
[/java]

This means that we don't need to call any <span style="font-family: 'courier new', courier;">updateName()</span> method each time first name / last name are changed - as full name becomes completely dynamic always derived from the first/last names.

This solution is simple and sound, and gets the job done quite well. However, as a side-effect we see that every time a person object is loaded, it might become dirty straight away if the value stored in the database for the name field differs from the getter of the name field.

There might be certain scenarios where we would be loading person objects as part of an object graph (e.g. Project might have a map of person or Timesheet might load a reference to person) - and when persisting the project object we might not want to persist the person object.

Although there are many solutions to stop that unwanted side-effect, the easiest and the most obvious solution is to <em>disable cascading</em> for the person map in the hibernate mapping of project - so this concern can be ignored.

There could be other java based approaches as well, e.g. <em>using a factory to</em> create the person object which ensures the person name is in a consistent state - but these might create additional restrictions on how clients use the person object.
<h2>Hibernate Forumula</h2>
Now lets consider similar approaches using hibernate. One might also apply this logic in person hibernate mapping.

[xml]
<!-- Note: you can also use concat(firstname, ' ', lastname) for the formula. -->
[/xml]

[java]
class Person {
// only when first and last name are changed then update the name field
public void setFirstName(String firstName) {
this.firstName = firstName;
updateName();
}
public void setLastName(String lastName) {
this.lastName = lastName;
updateName();
}
private void updateName() {
setFullName( this.firstName + " " + this.lastName );
}
public String getFullName() {
return this.fullName;
}
private void setFullName(String fullName) {
this.fullName = fullName;
}
}
[/java]

This way the name property is always loaded as derived from first and last names. One might want to use SQL case statements in the formula if the concatenation needs some special logic for the order of the concatenation. A minor efficiency present in the solution is that name is only updated when it needs to be.
<h2>Alternative Approach</h2>
Another approach one might take is to take advantage of LifeCylcle interface for persistent domain objects instead of changing the hibernate mapping.

[java]
class Person implements LifeCycle {
public void setFirstName(String firstName) {
this.firstName = firstName;
updateName();
}
public void setLastName(String lastName) {
this.lastName = lastName;
updateName();
}
private void updateName() {
setFullName( this.firstName + " " + this.lastName );
}
public String getFullName() {
return this.fullName;
}
private void setFullName(String fullName) {
this.fullName = fullName;
}
// called right AFTER the person is loaded and all fields are initialised
public void onLoad(..) {
updateName ();
}
// called right BEFORE the person is saved
public void onSave(..){
// any other logic for saving or assertions
}
}
[/java]

Although this adds more power to the domain object (may be more than it should have) - but it also gives the uncomfortable feeling of coupling the domain object with a repository level design/technology - suppose you want move to a JPA implementation - then you pretty much have to change your domain object to make things work.

Arguably, a better alternative to using the LifeCycle interface is <em>to use a hibernate onLoad listener</em> - that executes <span style="font-family: 'courier new', courier;">updateName()</span> upon loading the person object. That way the domain object is decoupled from a repository level interface.

I'm pretty sure there are many other ways of doing the same thing - and most of these are minor variations of each other - so pick an approach that you think is best for your usecase.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2008-12-10 23:28:15</wp:post_date>
		<wp:post_date_gmt>2008-12-10 23:28:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-derived-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[194939327]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hibernate Load Vs Get Differences</title>
		<link>http://ce5.ed6.myftpupload.com/2009/01/hibernate-load-vs-get-differences/</link>
		<pubDate>Mon, 05 Jan 2009 23:57:08 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razibh.wordpress.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[Programmers new to hibernate may face dilemmas trying to understand the subtle differences between hibernate's get and load methods for retrieving an entity. I remember my struggle to grasp the differences, and thought I would compile the information I got from various web sources into one single post to help out others facing similar issues. Here is a refresher on how these two methods can be used:

[java"]
// Open the session
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

// Load the Persistent entity using either Get or Load
Item itemByLoad = (Item) session.load(Item.class, new Long(1234));
//or should you use???
Item itemByGet = (Item) session.get(Item.class, new Long(1234));

tx.commit();
session.close();
[/java]

Below we explore the various aspects of Load/Get operations in Hibernate to understand their differences.
<h2>Javadoc</h2>
<ul>
	<li><strong>Get</strong>: Return the actual instance of the given entity class with the given ID, or null if there is no such instance. (If the instance is already exists in the current Session, return that instance or proxy.)</li>
	<li><strong>Load</strong>: Return a proxy instance of the given entity class with the given ID, assuming that the instance exists in the database.
<ul>
	<li><em>You should not use this method to determine if an instance exists</em> (use get() instead).</li>
	<li><em>Use this only to lazily retrieve an instance that you assume exists, where non-existence would be an actual error</em>.</li>
</ul>
</li>
</ul>
&nbsp;
<h2>Querying for an instance that doesn't exist in the database</h2>
<ul>
	<li><strong>Get</strong>: Database hit occurs· Returns <strong>null</strong></li>
	<li><strong>Load</strong>: <strong>No</strong> database hit occurs· Returns a <strong>proxy</strong>· Calling getter/setter on the proxy throws <strong>ObjectNotFoundException </strong><strong> </strong><span class="lang:default decode:true  crayon-inline">org.hibernate.ObjectNotFoundException:No row with the given identifier exists: [User#123]</span><strong> </strong></li>
</ul>
&nbsp;
<h2>Querying for an instance that exists in the database</h2>
<ul>
	<li><strong>Get</strong>: Database hit occurs· Returns the actual instance, not proxy i.e. <em>no Lazy Loading optimization!</em></li>
	<li><strong>Load</strong>: Will <strong>always</strong> return a <strong>proxy </strong>(<em>lazy loading optimization</em>)
<ul>
	<li>Database hit will <strong>not</strong> occur till you use getter/setter on the returned proxy.</li>
	<li><em>If you don't use getter/setter</em><em>on the proxy </em>load <strong>never</strong> generates a database hit, ie the object is <strong>never</strong> actually loaded from the database</li>
	<li>The only exception to the above is when the object is already present in the persistence cache, it will return the cached instance instead of a proxy</li>
</ul>
</li>
</ul>
&nbsp;
<h2>Accessing properties from a detached entity</h2>
An entity becomes detached when it is outside of an active Hibernate Session.
<ul>
	<li><strong>Get</strong>: · All non-lazy properties can be accessed <em>no Exception is thrown</em></li>
	<li><strong>Load</strong>: If you didn't access any properties while the detached entity was in persistent within the persistent context, then your detached entity is basically a proxy placeholder – Calling any getter/setter will throw a LazyInitialization exceptione.g.</li>
</ul>
[java]
session.beginTransaction();
User user=(User)session.load(User.class, new Long(1));
session.getTransaction().commit();
System.out.println(user.getPassword());
[/java]
<em>The above generates </em> <span class="lang:default decode:true  crayon-inline">org.hibernate.LazyInitializationException: could not initialize proxy - no Session</span>

&nbsp;
<h2>Typical Usage Guidelines</h2>
<ul>
	<li><strong>Get</strong>: For the most part, you'll probably use the get method most often in your code. If you ever want to use the JavaBean that you are retrieving from the database after the database transaction has been committed, you'll want to use the get method, and quite frankly, that tends to be most of the time. For example, if you load a User instance in a Servlet, and you want to pass that instance to a Java Server Page for display purposes, you'd need to use the get method, otherwise, you'd have a LazyInitializationException in your JSP</li>
	<li><strong>Load</strong>: On the other hand, if your goal is largely transactional, and you are only going to be accessing the JavaBean of interest within a single unit of work that will pretty much end once the transaction is committed, you'll want to use the load method.Furthermore, the load method may be the method of choice if you know, and are absolutely sure, that the entity you are searching for exists in the database with the primary key you are providing.</li>
</ul>
&nbsp;
<h2>Example</h2>
The following illustrates the difference between Get/Load operation.
<ul>
	<li><strong>Get</strong>: TWO SELECTS AND ONE UPDATE ARE GENERATED</li>
	<li><strong>Load</strong>: ONLY ONE SELECT AND UPDATE FOR USER ARE GENERATED</li>
</ul>
<pre class="lang:default decode:true">public class PetService {
	public void purchasePet(Long ownerUserId, Long petId) {
		Session session = getSessionFactory().openSession();
		Transaction tx = session.beginTransaction();

		User owner = session.get(User.class, ownerUserId);
		/* or, using load 
		 * User owner = session.load( User.class, ownerUserId); */

		Pet purchasedPet = session.get(Pet.class, petId);
		/* or using load Pet 
		 * purchasedPet = session.load( Pet.class, petId); */

		owner.setPet(purchasedPet);

		tx.commit();
		session.close();
	}
}</pre>
Also see my other post Hibernate Derived Properties]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2009-01-05 23:57:08</wp:post_date>
		<wp:post_date_gmt>2009-01-05 23:57:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-load-vs-get-differences</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[196118567]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Ronny]]></wp:comment_author>
			<wp:comment_author_email>sronny2012@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-04 02:05:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-04 02:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[interesting]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Apache Software Foundation Leaves JCP</title>
		<link>http://ce5.ed6.myftpupload.com/2010/12/apache-software-foundation-leaves-jcp/</link>
		<pubDate>Sat, 11 Dec 2010 04:58:33 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razibh.wordpress.com/2010/12/11/apache-software-foundation-leaves-jcp/</guid>
		<description></description>
		<content:encoded><![CDATA[Following a dispute over TCK licensing for the Apache Harmony project, ASF has quit the JCP.

ASF explains their move [https://blogs.apache.org/foundation/entry/the_asf_resigns_from_the here].
<blockquote>In the phrase
"fail to uphold their responsibilities under the JSPA", we are referring
to Oracle's refusal to provide the ASF's Harmony project with a TCK
license for Java SE that complies with Oracle's obligations under the
JSPA as well as public promises made to the Java community by officers
of Sun Microsystems (recently acquired by Oracle.)  This breach of the
JSPA was begun by Sun Microsystems in August of 2006 and is a policy
that Oracle explicitly continues today.  For more information on this
dispute, see our <a href="http://www.apache.org/jcp/sunopenletter.html">open letter to Sun Microsystems</a>.</blockquote>
Further, they provide some strong conclusive remarks:
<blockquote>The Apache Software Foundation concludes  that that JCP is not an open specification process - that Java  specifications are proprietary technology that must be licensed directly  from the spec lead under whatever terms the spec lead chooses; that the  commercial concerns of a single entity, Oracle, will continue to  seriously interfere with and bias the transparent governance of the  ecosystem;  that it is impossible to distribute independent  implementations of JSRs under open source licenses such that users are  protected from IP litigation by expert group members or the spec lead;  and finally, the EC is unwilling or unable to assert the basic power of  their role in the JCP governance process.</blockquote>
It is a real shame they are leaving, as they have contributed significantly to the Java Ecosystem. This departure follow recent ones from Doug Lea and Tim Peierls who voted against Java SE JSRs.

Looks like Java is going to have an interesting future ahead.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2010-12-11 15:58:33</wp:post_date>
		<wp:post_date_gmt>2010-12-11 04:58:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apache-software-foundation-leaves-jcp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="news"><![CDATA[news]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[195685274]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1366942913;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Map 5 Introduces 3D and Offline</title>
		<link>http://ce5.ed6.myftpupload.com/2010/12/google-map-5-introduces-3d-and-offline/</link>
		<pubDate>Fri, 17 Dec 2010 11:22:02 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Google Maps 5 </strong>for [[android]] introduces some awesome features:
<ul>
	<li><strong>Tilting:</strong> Drag down with two fingers to tilt the map. Tilt while zoomed in on one of the [http://www.google.com/mobile/maps/3d  100+ cities] around the world with 3D buildings to see a skyline spring to life.</li>
	<li><strong>Rotating:</strong> Twist with two fingers to rotate the map. After tilting to see 3D buildings, rotate around them to gain a new perspective from any direction.</li>
	<li><strong>Smooth zooming:</strong> Slide two fingers together or apart, and see the map and labels continuously scale to any zoom level, stopping when your fingers stop.</li>
	<li><strong>Compass mode:</strong> Center the map on your location, and then tap the compass button in the top right corner. The map will flip into 3D mode and start rotating to match your perspective, while still keeping all the labels upright and readable.</li>
</ul>
<strong>Offline Caching and Rerouting</strong>
Rather than having a static set of maps when installed, Maps will automatically start caching the areas you visit the most when your device is plugged in and connected to WiFi. You’ll still need a connection to start a route, but if you miss a turn along the way, Google Maps Navigation will quickly get you back on track, even if you don’t have an Internet connection.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2010-12-17 06:22:02</wp:post_date>
		<wp:post_date_gmt>2010-12-17 11:22:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-map-5-introduces-3d-and-offline</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[google]]></category>
		<category domain="post_tag" nicename="news"><![CDATA[news]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[194161697]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tagazine-media</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:8:"18641224";s:7:"blog_id";s:8:"19824617";s:9:"mod_stamp";s:19:"2010-12-17 11:22:02";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1368000350;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Display a Category for Logged in User Only</title>
		<link>http://ce5.ed6.myftpupload.com/2011/01/display-a-category-for-logged-in-user-only/</link>
		<pubDate>Mon, 03 Jan 2011 07:41:06 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[Using PHP Code Widget it is really easy to create a sidebar widget that will display a common list of categories for all users and show a specific category for admin user.

The steps to do this can be summarised as:

1. Install the PHP Code Widget plugin for wordpress from http://wordpress.org/extend/plugins/php-code-widget/

2. Go to wordpress admin &gt; widgets and add the PHP code widget to your sidebar

3. In the widget settings paste the code (see below) that will display the category list

[php]
<ul>
<?php
// List of categories to be excluded for public
$excl = '10,25,33';
// If user is logged in,  dont exclude the categories
if( is_user_logged_in()  ) {
$excl = '';
}
// List the categories hierarchy with counts, no title, and order it by name
wp_list_categories('show_count=1&amp;title_li=&amp;orderby=name&amp;exclude_tree=' . $excl . '&amp;exclude=' . $excl); ?>
</ul>
[/php]

If you would like to show the excluded category to admin only then replace line 6 with:

[php]

// If user is logged in and is an admin, dont exclude the categories
if( current_user_can('manage_options')) {
[/php]

To see all the options available to wp_list_categories see <a href="http://codex.wordpress.org/Template_Tags/wp_list_categories" target="_blank">http://codex.wordpress.org/Template_Tags/wp_list_categories</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2011-01-03 18:41:06</wp:post_date>
		<wp:post_date_gmt>2011-01-03 07:41:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>display-a-category-for-logged-in-user-only</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[201799425]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1368255560;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wp-Mediawiki plugin with SyntaxHighlighter Evolved</title>
		<link>http://ce5.ed6.myftpupload.com/2011/01/wp-mediawiki-plugin-with-syntaxhighlighter-evolved/</link>
		<pubDate>Tue, 04 Jan 2011 01:30:37 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[Wp-Mediawiki plugin and SyntaxHighlighter Evolved are two of my favourite plugins for wordpress.
* The WP-Mediawiki allows you to use wiki markups in wordpress, while the,
* Syntax highlighter plugin highlights syntax in code.

However, they conflict with eachother due to WP-Mediawiki's preformatting and encoding rules.

Easy way to fix this is to wrap your code in nowiki tag, for example:
<pre><nowiki>
// syntaxhighlighter code goes here
</nowiki></pre>
You might also have to disable preformatting in Wp-Mediawiki settings in Wordpress Admin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2011-01-04 12:30:37</wp:post_date>
		<wp:post_date_gmt>2011-01-04 01:30:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wp-mediawiki-plugin-with-syntaxhighlighter-evolved</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[202245452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1368002332;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Behaviour Driven Development using jBehave</title>
		<link>http://ce5.ed6.myftpupload.com/?p=275</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

&nbsp;

http://jbehave.org/reference/stable/concepts.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2014-06-14 11:03:56</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pathfinder App</title>
		<link>http://ce5.ed6.myftpupload.com/2014/06/javascript-application-design-using-modules-and-mvp-pattern/cat/</link>
		<pubDate>Sun, 06 Jul 2014 07:31:13 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/cat.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2014-07-06 07:31:13</wp:post_date>
		<wp:post_date_gmt>2014-07-06 07:31:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cat</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/cat.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/cat.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:505;s:6:"height";i:520;s:4:"file";s:15:"2014/07/cat.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"cat-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"cat-291x300.png";s:5:"width";i:291;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image_thumb1</title>
		<link>http://ce5.ed6.myftpupload.com/?attachment_id=279</link>
		<pubDate>Sun, 06 Jul 2014 07:31:17 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image_thumb1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2014-07-06 07:31:17</wp:post_date>
		<wp:post_date_gmt>2014-07-06 07:31:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image_thumb1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image_thumb1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/image_thumb1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:641;s:6:"height";i:442;s:4:"file";s:24:"2014/07/image_thumb1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"image_thumb1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"image_thumb1-300x206.png";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://ce5.ed6.myftpupload.com/2011/05/fermi-telescope-finds-giant-structure-in-our-galaxy/image/</link>
		<pubDate>Sun, 06 Jul 2014 07:31:29 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2014-07-06 07:31:29</wp:post_date>
		<wp:post_date_gmt>2014-07-06 07:31:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>208</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:436;s:4:"file";s:17:"2014/07/image.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x204.png";s:5:"width";i:300;s:6:"height";i:204;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>pathfinder</title>
		<link>http://ce5.ed6.myftpupload.com/2014/06/javascript-application-design-using-modules-and-mvp-pattern/pathfinder/</link>
		<pubDate>Sun, 06 Jul 2014 07:31:31 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/pathfinder.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2014-07-06 07:31:31</wp:post_date>
		<wp:post_date_gmt>2014-07-06 07:31:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pathfinder</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/pathfinder.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/pathfinder.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:730;s:6:"height";i:430;s:4:"file";s:22:"2014/07/pathfinder.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"pathfinder-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"pathfinder-300x176.png";s:5:"width";i:300;s:6:"height";i:176;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>clock</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/understanding-time-best-practices-for-distributed-applications/clock/</link>
		<pubDate>Sat, 12 Jul 2014 05:22:43 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/clock.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2014-07-12 15:22:43</wp:post_date>
		<wp:post_date_gmt>2014-07-12 05:22:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clock</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>288</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/clock.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/clock.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:359;s:4:"file";s:17:"2014/07/clock.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"clock-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:17:"clock-300x300.gif";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wall_clock_no_digits</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/understanding-time-best-practices-for-distributed-applications/wall_clock_no_digits/</link>
		<pubDate>Sat, 12 Jul 2014 05:25:34 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/wall_clock_no_digits.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2014-07-12 15:25:34</wp:post_date>
		<wp:post_date_gmt>2014-07-12 05:25:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wall_clock_no_digits</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>288</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/wall_clock_no_digits.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/wall_clock_no_digits.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:32:"2014/07/wall_clock_no_digits.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"wall_clock_no_digits-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"wall_clock_no_digits-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1405161003_clock</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/understanding-time-best-practices-for-distributed-applications/1405161003_clock/</link>
		<pubDate>Sat, 12 Jul 2014 05:30:13 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/1405161003_clock.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2014-07-12 15:30:13</wp:post_date>
		<wp:post_date_gmt>2014-07-12 05:30:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1405161003_clock</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>288</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/1405161003_clock.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/1405161003_clock.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:28:"2014/07/1405161003_clock.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"1405161003_clock-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dci</title>
		<link>http://ce5.ed6.myftpupload.com/?attachment_id=340</link>
		<pubDate>Wed, 16 Jul 2014 10:07:24 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2014-07-16 20:07:24</wp:post_date>
		<wp:post_date_gmt>2014-07-16 10:07:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dci</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/dci.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:633;s:6:"height";i:590;s:4:"file";s:15:"2014/07/dci.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"dci-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:15:"dci-300x279.png";s:5:"width";i:300;s:6:"height";i:279;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dci</title>
		<link>http://ce5.ed6.myftpupload.com/?attachment_id=341</link>
		<pubDate>Wed, 16 Jul 2014 10:08:24 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2014-07-16 20:08:24</wp:post_date>
		<wp:post_date_gmt>2014-07-16 10:08:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dci-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/dci1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:560;s:6:"height";i:404;s:4:"file";s:16:"2014/07/dci1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"dci1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"dci1-300x216.png";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dci</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/groovy-traits-bring-us-closer-to-the-vision-of-dci-architecture-2/dci-3/</link>
		<pubDate>Wed, 16 Jul 2014 11:20:43 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2014-07-16 21:20:43</wp:post_date>
		<wp:post_date_gmt>2014-07-16 11:20:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dci-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>349</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/dci2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:585;s:6:"height";i:390;s:4:"file";s:16:"2014/07/dci2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"dci2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"dci2-300x199.png";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dci</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/groovy-traits-bring-us-closer-to-the-vision-of-dci-architecture-2/dci-4/</link>
		<pubDate>Wed, 16 Jul 2014 11:23:05 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2014-07-16 21:23:05</wp:post_date>
		<wp:post_date_gmt>2014-07-16 11:23:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dci-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>349</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/dci3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:588;s:6:"height";i:390;s:4:"file";s:16:"2014/07/dci3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"dci3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"dci3-300x198.png";s:5:"width";i:300;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tasks</title>
		<link>http://ce5.ed6.myftpupload.com/2014/08/testing-asynchronous-code-in-java-with-countdownlatch/tasks/</link>
		<pubDate>Tue, 05 Aug 2014 01:52:30 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/08/tasks.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2014-08-05 11:52:30</wp:post_date>
		<wp:post_date_gmt>2014-08-05 01:52:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tasks</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>358</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/08/tasks.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/tasks.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:294;s:6:"height";i:569;s:4:"file";s:17:"2014/08/tasks.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"tasks-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"tasks-155x300.png";s:5:"width";i:155;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Improving Scalability &amp; Performance for Distributed Systems using Reactors</title>
		<link>http://ce5.ed6.myftpupload.com/?p=404</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[More and more applications are being distributed on the Cloud and external platform providers. As such, scalability and performance becomes increasingly important for distributed systems. The cost of poorly scalable systems and high latency can be high, consider the following real-life examples:
<ul>
	<li>Amazon found for every 100ms of latency cost them 1% in Sales</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2014-08-22 09:55:30</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using WP-Mediawiki and Lightspeed Links plugin together</title>
		<link>http://ce5.ed6.myftpupload.com/2011/01/using-wp-mediawiki-and-lightspeed-links-plugin-together/</link>
		<pubDate>Tue, 04 Jan 2011 02:41:57 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[WP-Mediawiki and Lightspeed Links are quite useful to create a wiki structure for your blog.

Where as WP-Mediawiki provides a good subset of mediawiki syntax available to your blog, it doesnt provide a way to do internal linking from one post to another related post.

Lightspeed links is a great plugin that fills up this gap. When you use them together, you have to '''disable Wikilinks''' in wp-mediawiki settings.

In this way, Lightspeed links can do the internal linking using this syntax (no spaces between the brackets):

<pre> [ [ title of post ] ] </pre>

While WP-Mediawiki does the external linking using wiki syntax.

<pre> [http://www.gmail.com Google Mail] </pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2011-01-04 13:41:57</wp:post_date>
		<wp:post_date_gmt>2011-01-04 02:41:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-wp-mediawiki-and-lightspeed-links-plugin-together</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[202270647]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1368001483;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SyntaxHighlighter Vertical Scrollbar Issue</title>
		<link>http://ce5.ed6.myftpupload.com/2011/01/syntaxhighlighter-vertical-scrollbar-issue/</link>
		<pubDate>Tue, 04 Jan 2011 09:40:54 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="SyntaxHighlighter" href="http://alexgorbatchev.com/SyntaxHighlighter" target="_blank">SyntaxHighlighter</a> by Alex G. is a great plugin for clientside syntax highlighting in blogs or wikis.
The 3.0.83 version of this plugin has a minor issue in Chrome browser where it displays a vertical scrollbar when it is not needed.

The issue is <a title="Superfluous vertical-scrollbars in Chrome" href="https://bitbucket.org/alexg/syntaxhighlighter/issue/177/superfluous-vertical-scrollbars-in-chrome" target="_blank">described here.</a>

Various solutions are mentioned in there, but the one that worked for me was:

Replace line 39 in <code>syles/shCore.css</code> with:

[css]
padding: 1px 0 !important;
[/css]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2011-01-04 20:40:54</wp:post_date>
		<wp:post_date_gmt>2011-01-04 09:40:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>syntaxhighlighter-vertical-scrollbar-issue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-2"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[202432237]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1367740082;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacking Wordpress Private Post Count</title>
		<link>http://ce5.ed6.myftpupload.com/2011/01/hacking-wordpress-private-post-count/</link>
		<pubDate>Tue, 04 Jan 2011 10:47:13 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://razib.org/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[May not be a good way to do it, but I modified the wordpress <code>wp-includes/taxonomy.php</code> to enable Private Post counts:
 

[php mark=3] 
function _update_post_term_count( $terms, $taxonomy ) {
// ... line 2461 : _update_count
$count = $wpdb-&amp;gt;get_var( $wpdb-&amp;gt;prepare( "SELECT COUNT(*) FROM $wpdb-&amp;gt;term_relationships, $wpdb-&amp;gt;posts 
WHERE $wpdb-&amp;gt;posts.ID = $wpdb-&amp;gt;term_relationships.object_id AND post_status IN ('publish','private') AND post_type IN 
('" . implode("', '", $object_types) . "') AND term_taxonomy_id = %d", $term ) );
// ... other stuff
}
[/php]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2011-01-04 21:47:13</wp:post_date>
		<wp:post_date_gmt>2011-01-04 10:47:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hacking-wordpress-private-post-count</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hacks"><![CDATA[hacks]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[tips]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-2"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>views</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>reddit</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:5:"count";i:0;s:4:"time";i:1366447836;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fermi Telescope Finds Giant Structure in Our Galaxy</title>
		<link>http://ce5.ed6.myftpupload.com/2011/05/fermi-telescope-finds-giant-structure-in-our-galaxy/</link>
		<pubDate>Thu, 26 May 2011 09:48:58 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://technotz.wordpress.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[This is amazing - NASA finds two bubble like structures over and under the center of our galaxy. This could be related to the super massive galaxy at the center of our galaxy.

It could be remnant of an explosion or eruption from the black hole.

This detection was made possible by the Fermi Satellite (2008) - Fermi scans the whole sky every 3 hours - scanning the sky in ever increasing detail

<a href="http://www.nasa.gov/mission_pages/GLAST/news/new-structure.html">NASA - NASA's Fermi Telescope Finds Giant Structure in our Galaxy</a>.

<a href="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image.png"><img class="alignnone wp-image-280 size-full" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/image.png" alt="image" width="640" height="436" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2011-05-26 09:48:58</wp:post_date>
		<wp:post_date_gmt>2011-05-26 09:48:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fermi-telescope-finds-giant-structure-in-our-galaxy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fermi"><![CDATA[fermi]]></category>
		<category domain="post_tag" nicename="nasa"><![CDATA[nasa]]></category>
		<category domain="category" nicename="space"><![CDATA[Space]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313934</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313942</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email>rick.d.naylor@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://abcmonkeys.com</wp:comment_author_url>
			<wp:comment_author_IP>165.125.181.9</wp:comment_author_IP>
			<wp:comment_date>2013-08-15 05:09:51</wp:comment_date>
			<wp:comment_date_gmt>2013-08-15 05:09:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just remember when you're not observing your site it doesn't exist]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[raz]]></wp:comment_author>
			<wp:comment_author_email>razibh@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>165.125.181.10</wp:comment_author_IP>
			<wp:comment_date>2013-08-15 05:16:17</wp:comment_date>
			<wp:comment_date_gmt>2013-08-15 05:16:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[it is now more likely to exist as we have found another observer :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Rick]]></wp:comment_author>
			<wp:comment_author_email>rick.d.naylor@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://abcmonkeys.com</wp:comment_author_url>
			<wp:comment_author_IP>165.125.181.9</wp:comment_author_IP>
			<wp:comment_date>2013-08-15 05:19:57</wp:comment_date>
			<wp:comment_date_gmt>2013-08-15 05:19:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes that is a theory of mine that observers are entangled therefore consciousness arises and what we perceive as perception  is from combined consciousnesses]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Functional Programming - Improving Readability of Code </title>
		<link>http://ce5.ed6.myftpupload.com/2014/06/functional-programming-improving-readability-of-code/</link>
		<pubDate>Tue, 03 Jun 2014 11:59:05 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[Coding is in many ways a form of communication. Just like any human language, a programming language allows us to express our intention in many different ways. A well written code can communicate its intention clearly and concisely to other developers. <em>Functional Programming</em> is a way of achieving this, and in the following example I'd like to illustrate how we can communicate better with Functional Programming constructs in Java 8.
<h3>Identifying Prime Numbers</h3>
Consider the rather simple task of printing the Prime numbers within a given List.
Note that a Prime Number is a positive integer greater than 1 that is only divisible by 1 and itself.

The program to achieve this using a simple imperative style may look like this:
<pre class="whitespace-before:1 whitespace-after:1 lang:java decode:true">boolean isPrime(int num) {
	boolean prime = true;
	if (num &gt; 1) {
		for (int divisor = 2; divisor &lt; num; divisor++) {
			if (num % divisor == 0) {
				prime = false;
				break;
			}
		}
	} else {
		prime = false;
	}
	return prime;
}

/**
 * Print prime numbers in a given list
 */
void printPrimes(List&lt;Integer&gt; values) {
	for (Integer num : values) {
		if (isPrime(num)) {
			System.out.println(num);
		}
	}
}</pre>
We can write the above in a declarative, functional way as follows:
<pre class="whitespace-before:1 whitespace-after:1  lang:java decode:true">boolean isPrime(int num) {
	return num &gt; 1 &amp;&amp; IntStream.range(2, num)
				.noneMatch(divisor -&gt; num % divisor == 0);
}

void printPrimes(List&lt;Integer&gt; values) {
	values.stream()
		.filter(Util::isPrime)
		.forEach(System.out::println);
}</pre>
Even though its a rather simple example, notice the lack of control structures (e.g. for/if) in the second approach. It is more like story telling instead of providing rigorous instructions to solve a problem. This is different from the imperative style, where we specify the details of how the problem needs to be solved as well as the control structure of the program. In this light, the second approach has the following advantages:
<ul>
	<li>Since the details of how a task is performed is left out, the compiler/runtime can optimise how the tasks are carried out or even perform Lazy Evaluation</li>
	<li>The cognitive load of understanding/following the control structures has been eliminated, thus improved clarity &amp; readability</li>
	<li>The second approach doesn't require a variable, thus reduces mutable state - which is desirable in concurrency</li>
</ul>

Functional Program improves program correctness with immutability and side-effect free functions, hence there is little need for tricky and expensive synchronisation for shared mutable state. These properties make Functional Programming a natural choice for designing highly concurrent and distributed systems.

Consider how easily the above program could be made concurrent and faster using Parallel Stream:
<pre class="whitespace-before:1 whitespace-after:1  lang:java decode:true">
void printPrimes(List&lt;Integer&gt; values) {
	values.parallelStream()
		.filter(Util::isPrime)
		.forEach(System.out::println);
}</pre>

This highlights the ability of Functional Programming to scale horizontally in a distributed environment, which is increasingly important  in the context of Big Data and multi-core CPU/GPU programming.

For the complete code example please see: <a href="https://github.com/openraz/java8-functional/blob/master/FunctionalJava8/src/examples/ImperativeDeclarativePrime.java" target="_blank">https://github.com/openraz/java8-functional/blob/master/FunctionalJava8/src/examples/ImperativeDeclarativePrime.java</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2014-06-03 11:59:05</wp:post_date>
		<wp:post_date_gmt>2014-06-03 11:59:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>functional-programming-improving-readability-of-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="functional-programming-2"><![CDATA[functional programming]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_facebook_user</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.facebook.com/razib.shahriar]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_mess</wp:meta_key>
			<wp:meta_value><![CDATA[Functional Programming Benefits]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313942</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Application Design using Modules and MVP Pattern</title>
		<link>http://ce5.ed6.myftpupload.com/2014/06/javascript-application-design-using-modules-and-mvp-pattern/</link>
		<pubDate>Sat, 14 Jun 2014 10:33:36 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[Majority of websites today use JavaScript to do more than just hide or show a button. As code complexity grows, it becomes harder to understand and maintain JavaScript code. In this example, two approaches of designing an application will be contrasted to highlight the benefits of a modular design. Although the example is a simple game application, it still demonstrates how breaking an application into loosely coupled modules makes it easy to understand, extend and maintain.
<h2>Designing a Path Finding Game</h2>
<strong>Requirements</strong>: The purpose of the application is to demonstrate different path finding algorithms for a game that involves a cat looking for a cake on an interactive board. The user can draw obstacles on the board by clicking on the tiles, and move the cat or cake to set its positions. The game can then determine a path that allows the cat to find the cake when a "Find Path" button is pressed. This is how the end result may look like:

<a href="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/cat.png"><img class="alignnone wp-image-278 size-full" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/cat.png" alt="Pathfinder App" width="505" height="520" /></a>

&nbsp;
<h2>Classic Approach</h2>
Using a classic JavaScript design approach, we can do the following:
<ul>
	<li>Use divs to represent the board and the actors, which are then manipulated using <strong>jQuery</strong></li>
	<li>Assign a CSS class to a div to represent various elements of the game:
<ul>
	<li>an empty square - <span class="lang:java decode:true  crayon-inline ">.square</span></li>
	<li>a square with an obstacle  - <span class="lang:java decode:true crayon-inline">.obstacle</span></li>
	<li>a square with the actor cat - <span class="lang:java decode:true crayon-inline">.actor</span></li>
	<li>a square with the goal cake - <span class="lang:java decode:true crayon-inline">.goal</span></li>
</ul>
</li>
	<li>Write a function that will query the divs using jQuery class selectors to find the positions of the cat and cake to determine the solution</li>
</ul>
In such approach, the view state and application state may get mixed together - as there are no clear separation between model and view.  The setup code for the board might look like:
<pre class="lang:js decode:true">// generate the board layout consisting of squares
for (var row = 0; row &lt; rows; row++) {
    for (var col = 0; col &lt; cols; col++) {
        $('div.board').append('&lt;div class="square" row="' + row + '" col="' + col + '"&gt;&lt;/div&gt;')
    }
}

// toggle between obstacle and open when a square is clicked
$('div.board').find(".square").click(function () {
    $(this).toggleClass('obstacle')		
})</pre>
When the game's actor cat is dropped on a square to specify a starting position, the class attributes of the divs are updated:
<pre class="lang:java decode:true">// when the actor is dropped on a square
$('.square').droppable(function() {
     $('.actor').removeClass('actor')
     $(this).addClass('actor')
})
</pre>
In this design, the code to move an actor to the square at position [10,15] may look like:
<pre class="lang:js decode:true">var isObstacle = $('.square[row=10][col=15]').hasClass('obstacle')
if (!isObstacle) {
     $('div.actor').removeClass('actor')
     $('.square[row=10][col=15]').addClass('actor')
}</pre>
Next step would be to implement the path finding algorithm. Without going any further, we can already start to notice that most of our code is entangled with jQuery. Such code may look simplistic at first, but it is hard to maintain as application logic is diffused with DOM manipulations. With time, it will become harder to follow how everything fits together - as everything is glued together with CSS selectors and callbacks.

This monolithic approach makes it hard to write reusable code as most functions are littered with view specific jQuery code. If we have to change how the view is generated, we would have to change many places of the code - we may even miss a few places.

&nbsp;
<h2>Alternative Modular Approach</h2>
We can start by identifying clusters of functions or objects that relate closely to a single domain concept. Also, we would like to separate the concerns of displaying the board/actors from the Game so that there is a clean separation between view and business logic. Thus, we come up with:
<ul>
	<li><strong>Board</strong> - Represents a Grid containing open tiles and obstacles</li>
	<li><strong>Actor</strong> - Represents the actor of the game - the Cat</li>
	<li><strong>Game</strong> - Co-ordinates the elements and rules of the game</li>
	<li><strong>Game-View</strong> - Visualising the state of the game.</li>
	<li><strong>Solver Service</strong> - A service or strategy to find a path from the Actor to the goal  on the board. This could also be a remote service using AJAX.</li>
</ul>
We can map these cluster of functions or objects into modules. This will allow us to clearly mark the boundaries and dependencies between different parts of our application.

Identifying the specific roles of objects allow us to apply a design pattern like MVC or MVP to glue the loosely coupled parts together. In this example, the Game object performs the role of the <strong>Presenter</strong> and the Board/Actor objects together comprise the <strong>Model</strong>. All V<strong>iew</strong> concerns are encapsulated in the Game-View module. The following illustration shows the relationship between the application objects:

<a href="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/pathfinder.png"><img class="alignnone wp-image-281 size-full" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/pathfinder.png" alt="pathfinder" width="730" height="430" /></a>

&nbsp;

With such separation of concerns and single responsibility, the code to move the actor to a square will look like:
<pre class="lang:java decode:true">if (board.isValidMove(position)) {
    actor.setPosition(position)
    gameView.updateActor(position)
}</pre>
Any interaction that happens in the view is handled by the Game Presenter:
<pre class="lang:js decode:true">// Inside Game Presenter
// View object - Pass Presenter callbacks for event handling
var gameView = new GameView(options, {
    onObstacleChange : function(isObstacle, row, col) {
        board.setObstacle(isObstacle, row, col)
        gameView.reset()
    },
    onNewStartPosition: function(row, col) {
        actorPos = new Position(row, col)
        gameView.reset()
    },
    onNewGoalPosition: function(row, col) {
        goalPos = new Position(row, col)
        gameView.reset()
    }
})</pre>
The modular design allows us to load different Service/Strategies for solving the game - which may be loaded lazily as required:
<pre class="lang:java decode:true">// Solver Service returns a list of moves that leads the cat to the cake
var solution = SolverService.solve(board, actorPos, goalPos)
solution.forEach(function(position) {
    game.moveActor(position)
})</pre>
In summary, the modular design allows us to create reusable components that can be easily tested and maintained. Application logic is cleanly isolated from view/DOM manipulation logic as we have moved all jQuery code into our view module. This makes the code much easier to comprehend. Since the dependencies between modules can be explicitly defined, the runtime can load modules in parallel to reduce application load time.

If you would like to play with the sample application, please find it here: <a href="https://github.com/openraz/javascript/tree/master/pathfinder" target="_blank">https://github.com/openraz/javascript/tree/master/pathfinder</a>
<pre class="lang:java decode:true ">git clone https://github.com/openraz/javascript.git</pre>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2014-06-14 10:33:36</wp:post_date>
		<wp:post_date_gmt>2014-06-14 10:33:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-application-design-using-modules-and-mvp-pattern</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="html"><![CDATA[Html]]></category>
		<category domain="category" nicename="html5"><![CDATA[Html5]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313942</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[JavaScript Application Design using Modules and...]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.scoop.it/t/codesource/p/4023115584/2014/06/17/javascript-application-design-using-modules-and-mvp-pattern</wp:comment_author_url>
			<wp:comment_author_IP>89.30.118.151</wp:comment_author_IP>
			<wp:comment_date>2014-06-17 20:14:50</wp:comment_date>
			<wp:comment_date_gmt>2014-06-17 20:14:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Majority of websites today use JavaScript to do more than just hide or show a button. As code complexity grows, it becomes harder to understand and maintain JavaScript code.&nbsp; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Understanding Time: Best Practices for Distributed Applications</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/understanding-time-best-practices-for-distributed-applications/</link>
		<pubDate>Sat, 12 Jul 2014 05:32:26 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft size-full wp-image-309" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/1405161003_clock.png" alt="1405161003_clock" width="256" height="256" />When representing <span class="il" style="color: #222222;">time</span> in software, we need to be aware of the nature of <span class="il" style="color: #222222;">time</span>. Improper handling of <span class="il" style="color: #222222;">time</span> can easily create tricky issues that are hard to identify.<span style="color: #444444;">[toc]</span>
<h2>Key Concept: <span class="il" style="color: #222222;">Time</span> without location is meaningless</h2>
It took the genius of Albert Einstein to fully <span class="il" style="color: #222222;">understand</span> the true nature of <span class="il" style="color: #222222;">time</span>. <span class="il" style="color: #222222;">Time</span> can't exist without a location in space, as space and <span class="il" style="color: #222222;">time</span> are inter-connected. Simply put, if it is <span class="aBn" tabindex="0" data-term="goog_1737188022"><span class="aQJ">9 AM</span></span> in Sydney, it is<em> not necessarily</em> <span class="aBn" tabindex="0" data-term="goog_1737188023"><span class="aQJ">9 AM</span></span> everywhere in the universe (unless of course you have a broken watch). Without going into too much details of the Physical properties of <span class="il" style="color: #222222;">time</span>, the important consequence of this concept is:
<blockquote>To accurately represent or measure time in computer software, one must take into account the location where the time was measured.</blockquote>
There is no silver bullet or a technology framework that can solve all <span class="il" style="color: #222222;">time</span> related problems if we don't <span class="il" style="color: #222222;">understand</span> the above nature of <span class="il" style="color: #222222;">time</span>.
<h2>Time is Relative and Contextual</h2>
When modelling time, we usually deal with two types of time data,  "<strong>Civil Time</strong>" and "<strong>Physical Time</strong>".
<h3>Civil Time</h3>
Civil time is represented as a point on a Calendar or a local clock as agreed by civilian authorities. This is the type of time data we use in our day to day conversations. When capturing Civil Time, we need to be aware of the context in which it is specified. As an example, when we say "<em>Lets catch 9'o clock bus</em>" - a lot of information is implied by the context of the speaker. Such "implied or implicit context" is not always available in software design, and needs to be explicitly specified if the software will be used in more than one <span class="il" style="color: #222222;">time</span> zones.
<blockquote>Therefore, we need to be mindful of the context and timezone when modelling time. In addition, we also need to be aware of local transformations such as Day Light Saving Time (DST).</blockquote>
<h3>Physical Time</h3>
Physical Time is represented as a point in the continuous universal timeline. This kind of time data can be adequately represented in Universal Time (UTC), which is calculated by reference to atomic clocks. Physical time is useful in storing calculations and measurements, as it is <strong>unambiguous and context-free</strong>.
<h2>Best Practices</h2>
Time is a complex topic, however we can still follow some best practices to avoid some pitfalls that may occur in distributed client-server applications.

<strong>1. Persist Globally, Display Locally - When you store <span class="il" style="color: #222222;">time</span>, store it in UTC and use server time: </strong>UTC time is DST agnostic, thus it is a good approach of storing <span class="il" style="color: #222222;">time</span> without confusion.

<strong>2. Late Conversion - Only apply timezone/DST in the <span style="text-decoration: underline;">Last possible moment</span> when you display the <span class="il" style="color: #222222;">time</span> to client: </strong>Only apply timezone formats at the very end, when the <span class="il" style="color: #222222;">time</span> is being displayed at the client terminal/browser. When converting to timezone, remember that timezones may change, and an entire state or country may not be in the same timezone.

<strong>3. Capture Context - When capturing T<span class="il" style="color: #222222;">ime</span> as input, take into consideration how the client is specifying the <span class="il" style="color: #222222;">time</span>, and for what purpose: </strong>Understand the context in which a <span class="il" style="color: #222222;">time</span> related information is specified. Here are a few examples of different contexts where the meaning of <span class="il" style="color: #222222;">time</span> can vary:
<table>
<thead>
<tr>
<th>Example Type</th>
<th>Example Usage</th>
<th>Contextual Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Event <span class="il" style="color: #222222;">Time</span></td>
<td>The concert is going to start at <span class="aBn" tabindex="0" data-term="goog_1737188024"><span class="aQJ">10pm</span></span></td>
<td>Event <span class="il" style="color: #222222;">time</span> is always relative to the location of where the event takes place</td>
</tr>
<tr>
<td>Contract <span class="il" style="color: #222222;">Time</span></td>
<td>The car insurance is valid till <span class="aBn" tabindex="0" data-term="goog_1737188025"><span class="aQJ">31st January</span></span> next year</td>
<td>Depending on the insurance company's policies, the policy will expire at <span class="aBn" tabindex="0" data-term="goog_1737188026"><span class="aQJ">5pm 31st January</span></span> depending on where the policy is purchased from. Exact meaning needs to be clarified.</td>
</tr>
<tr>
<td>Recurring <span class="il" style="color: #222222;">Time</span></td>
<td>The TV show airs every day at <span class="aBn" tabindex="0" data-term="goog_1737188027"><span class="aQJ">9am</span></span></td>
<td>Everyday at <span class="aBn" tabindex="0" data-term="goog_1737188028"><span class="aQJ">9am</span></span> local <span class="il" style="color: #222222;">time</span>, regardless of DST</td>
</tr>
<tr>
<td>Floating Durations</td>
<td>Tech support available during Business HoursExpress Trains available during Peak Hours on Weekdays</td>
<td>Always based on local time and day of week, subjected to holidays etc.</td>
</tr>
<tr>
<td colspan="1"><span class="il" style="color: #222222;">Time</span> interval or relative <span class="il" style="color: #222222;">time</span></td>
<td colspan="1">Contract is due for renewal every year..
or We charge you phone fee on a monthly basis</td>
<td colspan="1">Storing agreed interval from a reference point.</td>
</tr>
</tbody>
</table>
&nbsp;

<strong>4. Use the Universally Accepted ISO format for Web Services</strong>

When designing web based services that expose time (e.g. created date, modified data) it is best to keep it in a human readable ie. string form rather than a long number. It allows interoperability between different types of clients, and also allows humans to understand and debug the service. Standardised formats as ISO 8601 should be considered.
<blockquote>A poor choice in representing date/time for web services is Numeric time (e.g. Long 1341542232312) - which has limited readability, usability or portability.</blockquote>
ISO date format is the best choice for a date representation that is accurately/universally (e.g. W3C) understandable. Reference: <a href="http://en.wikipedia.org/wiki/ISO_8601" target="_blank" rel="nofollow">http://en.wikipedia.org/<wbr />wiki/ISO_8601</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2014-07-12 15:32:26</wp:post_date>
		<wp:post_date_gmt>2014-07-12 05:32:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-time-best-practices-for-distributed-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-practice"><![CDATA[best practice]]></category>
		<category domain="category" nicename="design"><![CDATA[Design]]></category>
		<category domain="post_tag" nicename="design-2"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="time"><![CDATA[time]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[309]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Groovy traits bring us closer to the vision of DCI Architecture</title>
		<link>http://ce5.ed6.myftpupload.com/2014/07/groovy-traits-bring-us-closer-to-the-vision-of-dci-architecture-2/</link>
		<pubDate>Wed, 16 Jul 2014 10:37:47 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=349</guid>
		<description></description>
		<content:encoded><![CDATA[With the recent addition of Traits in Groovy 2.3, it becomes easier to implement the vision of DCI Architecture. The trait construct replaces the previously available @Mixin transformation, making traits a first class construct in the language itself. In this article we will explore how a simple DCI application can be developed using Groovy Traits.
<h2>What are Traits?</h2>
Traits are a structural construct of the language that allow composition of behaviours. Similar to the <span style="font-family: 'courier new', courier;">interface</span> construct in Java, traits are used to define object types by specifying supported methods. But unlike <span style="font-family: 'courier new', courier;">interfaces</span>, traits can be <em>partially implemented</em> - allowing traits to provide default implementations for types. Traits can be used to implement multiple inheritance in a controlled way, without running into the <a href="http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem">diamond problem</a>. Groovy resolves multiple inheritance conflicts by letting the last declared trait's method to win.

Traits provide a powerful design alternative to Inheritance for reusing behaviours. As an example, the concept of an Account can be modelled using traits. This allows us to create a reusable unit of behaviour that can be applied to any objects. Following is an example of how such a trait is declared:
<pre class="lang:default decode:true">trait Account {
	double balance = 0
	
	void increaseBalance(double amount) {
		balance += amount
	}
	
	void decreaseBalance(double amount) {
		balance -= amount
	}
}</pre>
The trait of account can be used to represent a Savings Account Object, it can also be applied to other objects e.g. a Student Object to represent the concept of a Student Account. For a simple example, we will just represent two account types using the Account trait:
<pre class="lang:default decode:true">class SavingsAccount implements Account {
	SavingsAccount(balance) { 
		this.increaseBalance(balance) 
	}
	
	@Override String toString() { 
		"Savings: ${balance}" 
	}
}

class CheckingAccount implements Account {
	CheckingAccount(balance) { 
		this.increaseBalance(balance)  
	}
	
	@Override String toString() { 
		"Checking: ${balance}" 
	}
}</pre>
<h2>Representing DCI Roles using Traits</h2>
DCI (Data, Context, Interaction) is a vision to capture the end user cognitive model of roles and interactions between them. The paradigm separates the domain model (<em>data</em>) from use cases (<em>context</em>) and Roles that objects play (interaction). This allows us to cleanly separate code for rapidly changing system behavior (what the system does) from code for slowly changing domain knowledge (what the system is).

DCI promotes the decoupling of a Role that an object plays from the object itself. The same object can play different roles depending on the context. In our example, the same Account object can play the role of money source or a money destination in different transactions. These roles can be represented by the following Traits:
<pre class="lang:default decode:true">trait TransferMoneySource implements MoneySource {
	void withdraw(double amount, MoneyDestination dest) {
		if (getBalance() &gt; amount) {
			this.decreaseBalance(amount)
			dest.deposit(amount)
			this.updateLog "Withdrawal of ${amount} performed"
		} else {
			throw new IllegalArgumentException("Insufficient Balance in Source")
		}
	}
}

trait TransferMoneyDestination implements MoneyDestination {
	public void deposit(double amount) {
		increaseBalance(amount)
	}
}</pre>
<h2>Binding The Roles to Objects in a Use Case</h2>
The Context in DCI enacts the use-case by assigning roles to objects, and then the objects interact as their roles. Below, the first account plays the role of a Money Source, and the second account plays the role of a Money Destination. The Groovy <strong><span style="font-family: 'courier new', courier;">as</span></strong> keyword binds the role trait to the object that plays the role. The objects in a use-case collaborate using only role methods.
<pre class="lang:default decode:true">class WithdrawalContext {
	Account source, dest
	double amount
	
	def execute() {
		// Apply the role of a MoneySource to a source Account
		MoneySource moneySource = source as TransferMoneySource
		// Apply the role of a MoneyDestination to a destination Account
		MoneyDestination moneyDestination = dest as TransferMoneyDestination
		// Perform the usecase
		moneySource.withdraw(amount, moneyDestination)
	}
}</pre>
DCI allows the source code to reflect the run-time structure, as the network of interactions between Roles in the code is the same as the corresponding network of objects at run time. The following picture illustrates this network of interactions:

<a href="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci3.png"><img class="alignnone size-full wp-image-353" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/07/dci3.png" alt="dci" width="588" height="390" /></a>

A sample application executing the use-case may look like:
<pre class="lang:default decode:true">def savings = new SavingsAccount(50.0)
def checkings = new CheckingAccount(200.0)
...
new WithdrawalContext([ source :checkings, dest: savings, amount:100 ]).execute()
...
// Sample Output
Before Tranfer: Savings: 50.0, Checking: 200.0
Withdrawal of 100.0 performed
After Tranfer: Savings: 150.0, Checking: 100.0
</pre>
To conclude, the dynamic nature Groovy traits provides an excellent tool for object composition and brings us closer to the DCI vision.
<h2>Further Reading</h2>
All code can be found under: <a href="https://github.com/openraz/dci/tree/master/groovy-dci">https://github.com/openraz/dci/tree/master/groovy-dci</a>
Checkout the github project: <a href="https://github.com/openraz/dci.git">https://github.com/openraz/dci.git</a>

DCI Vision: <a href="http://www.artima.com/articles/dci_vision.html">http://www.artima.com/articles/dci_vision.html</a>
DCI Resources: http://fulloo.info/Documents/

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2014-07-16 20:37:47</wp:post_date>
		<wp:post_date_gmt>2014-07-16 10:37:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-traits-bring-us-closer-to-the-vision-of-dci-architecture-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing Asynchronous Code in Java with CountDownLatch</title>
		<link>http://ce5.ed6.myftpupload.com/2014/08/testing-asynchronous-code-in-java-with-countdownlatch/</link>
		<pubDate>Tue, 05 Aug 2014 06:42:20 +0000</pubDate>
		<dc:creator><![CDATA[raz]]></dc:creator>
		<guid isPermaLink="false">http://ce5.ed6.myftpupload.com/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[Asynchronous Event driven applications are becoming ever more common, and testing the correctness of these applications can be tricky. However, there are some techniques and tools available to aid testing asynchronous code - one such tool is a CountDownLatch.
<h2>Executing Concurrent Tasks</h2>
Suppose we have an application that runs simple tasks. These tasks can take varying amount of time to finish. Upon the completion of a task, a task can be marked as executed.
<pre class="lang:default decode:true ">class Task implements Runnable {
	private String taskId;
	private boolean executed;
	
	public Task(String taskId) {
		this.taskId = taskId;
	}
	
	@Override
	public void run() {
		System.out.println("Performed task " + taskId);
		executed = true;
	}
	
	public boolean hasExecuted() {
		return executed;
	}
}</pre>
The Tasks are run by a TaskRunner object, which uses an Executor Service to run tasks concurrently:
<pre class="lang:default decode:true">class TaskRunner {
	ExecutorService executor = Executors.newCachedThreadPool();

	public void executeTasks(List&lt;Task&gt; tasks) {
		for (Task task : tasks) {
			executor.submit(task);
		}
	}
	
	public void tearDown() {
		executor.shutdown();
	}
}</pre>
<h2>Basic Test Case</h2>
If we have to write a very basic test case for the task runner, it may look like:
<pre class="lang:default decode:true">@Test
public void testExecution() throws InterruptedException {
	// Generate Sample Tasks
	List&lt;Task&gt; tasks = new ArrayList&lt;&gt;();
	for (int i = 0; i &lt; 10; i++) {
		tasks.add(new Task("Task " + i));
	}
	
	taskRunner.executeTasks(tasks);
	
	// Give the tasks sufficient time to finish
	Thread.sleep(2000);
	
	for (Task task : tasks) {
		assertTrue(task.hasExecuted());
	}
}</pre>
In the above test we had to a <span style="font-family: 'courier new', courier;">Thread.sleep()</span> of 2 seconds because the tasks may not have finished before we reach assert statements.  However, the tasks may take more or less than 2 seconds to finish.

There are at least two problems with this approach:
<ul>
	<li>The test is unreliable, as running the tests on a faster or slower machine or build agent influences the result of the test.</li>
	<li>These kind of tests also make the build slower when unit tests are run as part of the build. This goes against the principles of <a href="http://en.wikipedia.org/wiki/Continuous_integration#Keep_the_build_fast">"Continuous Integration"</a></li>
</ul>
We can circumvent these concerns with a CountDownLatch
<h2>What is a CountDownLatch?</h2>
A CountDownLatch is a construct that allows one or more threads to wait until a set of operations being performed in other thread completes.
<ul>
	<li>The latch is initialised with a <em>Count</em>, a positive integer e.g. 2</li>
	<li>The thread that calls<span style="font-family: 'courier new', courier;"> latch.await()</span> will block until the <em>Count</em> reaches to <em>Zero</em></li>
	<li>All other threads are required to decrement the Count by calling <span style="font-family: 'courier new', courier;">latch.countDown()</span></li>
	<li>Once the <em>Count</em> reaches Zero, the awaiting thread resumes execution</li>
</ul>
<img class="alignright wp-image-363" src="http://ce5.ed6.myftpupload.com/wp-content/uploads/2014/08/tasks.png" alt="tasks" width="270" height="523" />Once a latch reaches Zero, it can no longer be used, a brand new latch needs to be created. However, a CyclicBarrier may be more suited for such requirements.The following is a simple usecase of how to use a CountDownLatch:
<pre class="font-size:12 width-set:true width:440 striped:false nums:false lang:default decode:true">CountDownLatch latch = new CountDownLatch(3);
ExecutorService executor = Executors.newCachedThreadPool();

// submit three tasks
for (int i = 0; i &lt; 3; i++) {
	executor.submit(new Runnable() {
		@Override
		public void run() {
			// do long running task here
			System.out.println("Performing long task...");
			// when task finished, countDown
			latch.countDown();
		}
	});
}

// wait until task is finished
latch.await();
System.out.println("All tasks are done!! ");

executor.shutdown();</pre>
<h2>Better Tests using Latch</h2>
The <span style="font-family: 'courier new', courier;">TestRunner</span> test we discussed previously using <span style="font-family: 'courier new', courier;">Thread.sleep(...) </span>can be written using a CountDownLatch. Note how the test calls latch.await() to wait for all tasks to finish before it can verify the assertions.
<pre class="lang:default decode:true ">@Test
public void testExecutionLatch() throws InterruptedException {
	CountDownLatch latch = new CountDownLatch(10);
	List&lt;Task&gt; tasks = new ArrayList&lt;&gt;();
	for (int i = 0; i &lt; 10; i++) {
		// Create latched tasks that countdowns the latch when it finishes
		tasks.add(new Task("Task " + i) {
			@Override
			public void run() {
				super.run();
				latch.countDown();
			}
		});
	}
	
	taskRunner.executeTasks(tasks);
	
	// wait for all tasks to finish
	latch.await();
	
	for (Task task : tasks) {
		assertTrue(task.hasExecuted());
	}
}</pre>
This gist can be found here: <a href="https://gist.github.com/openraz/21f6bae97795ea145ea0" target="_blank">https://gist.github.com/openraz/21f6bae97795ea145ea0</a>

<strong>Tip:</strong>
If a <span style="font-family: 'courier new', courier;">Task</span> doesn't finish due to a bug in our <span style="font-family: 'courier new', courier;">TestRunner</span> implementation, then test may forever block. Thus, its a good idea to impose a timeout on our tests either by introducing timeout parameter in the <span style="font-family: 'courier new', courier;">@Test</span> annotation <span class="lang:default decode:true crayon-inline">@Test(timeout=2000)</span> or simply specifying a timeout in the await  <span class="lang:default decode:true crayon-inline ">latch.await(2, TimeUnit.SECONDS);</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2014-08-05 16:42:20</wp:post_date>
		<wp:post_date_gmt>2014-08-05 06:42:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-asynchronous-code-in-java-with-countdownlatch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concurrency"><![CDATA[concurrency]]></category>
		<category domain="category" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313920</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_6313927</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_twitter_user</wp:meta_key>
			<wp:meta_value><![CDATA[@openraz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1407241352;s:7:"payload";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
